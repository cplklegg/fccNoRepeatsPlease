Return the number of total permutations of the provided string that don't have repeated consecutive letters. Assume that all characters in the provided string are each unique.

For example, aab should return 2 because it has 6 total permutations (aab, aab, aba, aba, baa, baa), but only 2 of them (aba and aba) don't have the same letter (in this case a) repeating.

Remember to use Read-Search-Ask if you get stuck. Try to pair program. Write your own code.

Here are some helpful links:

Permutations
RegExp

code:

function permAlone(str) {
  var consecutive = /(.)\1/;
 
  return heap(str).filter(function(currentPerm) {
    return !consecutive.test(currentPerm);
  }).length;  // We return the length of the filtered array.
 
  function heap(str) {
    var arr = str.split(''),
      permutations = [];
 
    function swap(a, b) {
      var tmp = arr[a];
      arr[a] = arr[b];
      arr[b] = tmp;
    }
 
    function gen(n) {
      if (n === 1) {
        permutations.push(arr.join(''));
      } else {
        for (var i = 0; i != n; i++) {
          gen(n - 1);
          swap(n % 2 ? 0 : i, n - 1);
        }
      }
    }
 
    gen(arr.length);
    return permutations;
  } 
}
